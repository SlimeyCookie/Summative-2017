<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pspeed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vstick init
ssize = 30;
margin = 6;

vstick_init(1,display_get_gui_width()-ssize-margin,display_get_gui_height()-ssize-margin,ssize,false,noone,noone);
vstick_set_backsprite(1,bgstick);
vstick_init(2,ssize+margin,display_get_gui_height()-ssize-margin,ssize,false,noone,noone);
vstick_set_backsprite(2,bgstick);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reload
reloadtime[0] = 0.8*room_speed;
reloadtime[1] = 1.2*room_speed;
reloadtime[2] = 0.05*room_speed;
shoot = true;
currentgun = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>last</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define vars
reload = 0;
image_speed = 0.2

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cash</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set dx and dy based on currentgun
if (currentgun == 0) {
    dy = 40;
    dx = 120;
} else {

}
Len = point_distance(0, 0, dx, dy);
Angle = point_direction(0, 0, dx, dy);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>outOfCombat</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///outofcombat 
outOfCombat = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gun shoot
if (vstick_get_xaxis(1) == 0 &amp;&amp; vstick_get_yaxis(1) == 0) {
    shoot = false;
} else {
    shoot = true;
}

reload++;
if (shoot == true) {
    if (reload &gt; reloadtime[currentgun]) {
        reload = 0;
        if(currentgun ==0) {
            bspeed = 20;
            dx = 0; //offset where gun is
            dy = 0;
            
            Len = point_distance(0, 0, dx, dy);
            Angle = point_direction(0, 0, dx, dy);
            // or, in case you want to use other program to calculate it, you can use:
            // Len = sqrt(sqr(DX) + sqr(DY));
            // Angle = radtodeg(arctan2(-DY, DX));
                        
            bullet_id = instance_create(x + lengthdir_x(Len, Angle+image_angle), y + lengthdir_y(Len, Angle+image_angle), b_pistol);
            bullet_id.direction = image_angle;
            bullet_id.speed = bspeed;
        }
        if (currentgun == 1) {
            bspeed = 30;
            dist=140;
            xpos = x;// + lengthdir_x(dist, image_angle)
            ypos = y;// + lengthdir_y(dist, image_angle)
            dir = point_direction(0,0,vstick_get_xaxis(1),vstick_get_yaxis(1));
            var numpellets = 20;
            for (var i = 0; i &lt; numpellets; i++) {
                var offsetx = random(32)-15;
                var offsety = random(32)-15;
                b = instance_create(xpos+offsetx,ypos+offsety,b_pellet);
                b.speed = bspeed;
                b.direction = dir-15 + i*(30/numpellets);
            }
            /*
            b = instance_create(xpos,ypos,b_pellet);
            b.speed = bspeed;
            b.direction = dir;
            b = instance_create(xpos,ypos,b_pellet);
            b.speed = bspeed;
            b.direction = dir-15;
            b = instance_create(xpos,ypos,b_pellet);
            b.speed = bspeed;
            b.direction = dir-30;
            b = instance_create(xpos,ypos,b_pellet);
            b.speed = bspeed;
            b.direction = dir+15;
            b = instance_create(xpos,ypos,b_pellet);
            b.speed = bspeed;
            b.direction = dir+30; */
            
        }
        if (currentgun == 2) {
            // Machine gun
            bspeed = 30;
            dist=140;
            xpos = x;// + lengthdir_x(dist, image_angle)
            ypos = y;// + lengthdir_y(dist, image_angle)
            dir = point_direction(0,0,vstick_get_xaxis(1),vstick_get_yaxis(1));

            var aimingiseasy = random(16)-8;
            b = instance_create(xpos,ypos,b_machinegun);
            b.speed = bspeed;
            b.direction = dir+aimingiseasy;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step vstick
vstick_step(1);
vstick_step(2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///image angles
if (vstick_get_xaxis(1) == 0 &amp;&amp; vstick_get_yaxis(1) == 0) {
    image_angle = last;
} else {
    image_angle = point_direction(0,0,vstick_get_xaxis(1),vstick_get_yaxis(1));
    last = point_direction(0,0,vstick_get_xaxis(1),vstick_get_yaxis(1));
}
if (vstick_get_xaxis(2) == 0 &amp;&amp; vstick_get_yaxis(2) == 0) {
    speed = 0;
} else {
    direction = point_direction(0,0,vstick_get_xaxis(2),vstick_get_yaxis(2));
    speed = point_distance(0,0,vstick_get_xaxis(2),vstick_get_yaxis(2)) * pspeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check out of bounds and regen
if (x &gt; room_width){
    x = room_width;
}

if (x &lt; 0){
    x = 0;
}

if (y &gt; room_height){
    y = room_height;
}

if (y &lt; 0){
    y = 0;
}

//hp regen
/*if (player.hp != 460 and outOfCombat){
    player.hp += 0.3;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vstick_draw(1);
vstick_draw(2);
draw_set_colour(c_red);
ry = display_get_gui_height()-sprite_get_height(spr_healthBar);
rx = display_get_gui_width()/2-sprite_get_width(spr_healthBar)/2;
draw_rectangle(rx, ry, rx + (sprite_get_width(spr_healthBar) * (hp/100))-1, ry + sprite_get_height(spr_healthBar),false);
//draw_sprite(hpborder,0,display_get_gui_width()/2-sprite_get_width(hpbar)/2,display_get_gui_height()-ssize/2-sprite_get_height(hpbar)+50);
draw_sprite(spr_healthBar,0,rx,ry);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentgun</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
