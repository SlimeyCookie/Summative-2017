<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup
global.time_between_waves = room_speed*15;
global.spawnrate = 50;
global.startingzombies = 5;
global.increment = 2;
global.totalwaves = 4;
global.ratio[0] = 75; //out of 100%
global.ratio[1] = 25;
global.ntypes = 2;
////////////////////////////////////////////
programmedzombies = 2;
////////
ntypes = global.ntypes;
spawnrate = global.spawnrate
fastforwarded = false;
// CONSTANT
spawnpoint[0,0] = 740;
spawnpoint[0,1] = 81;
spawnpoint[1,0] = 1473;
spawnpoint[1,1] = 1150;

wavenumber = 0;

positions = 1; // Number of positions 1 - 4

alarm[1] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New wave
wavenumber++;
fastforwarded = false;

inwave = global.startingzombies + (wavenumber-1)*global.increment;

if (wavenumber == round(global.totalwaves/2)) {
    //halfway
    positions++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check # of zombies
if !instance_exists(zombie) {
    // Check to see if the game is over
    if (wavenumber &gt;= global.totalwaves) {
        room_restart();
    } else {
        // Start next wave early if the timer is going between waves
        if (obj_zombie_controller.alarm[1]) {
            if !fastforwarded {
                obj_zombie_controller.alarm[1] = room_speed*1.5;
                fastforwarded = true;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chance to spawn enemy
spwn = floor(random(spawnrate));

if (spwn == 0 and inwave &gt; 0) {
    // Spawn a gummy at a position
    type = random(100);
    c = 0;
    for (i = 0; i &lt; ntypes; i++) {
        if (type &gt;= c and type &lt;= c + global.ratio[i]) {
            type = i;
            break;
        } else {
            c += global.ratio[i];
        }
    }
    
    switch (type) {
        case 0:
            t = zombie;
            break;
        case 1:
            t = enemy_dog;
            break;
    }
    inwave--;
    position = irandom(positions-1);
    instance_create(spawnpoint[position,0], spawnpoint[position,1], t)

    if (inwave &lt;= 0 and wavenumber &lt; global.totalwaves) {
        // Wave is over so start timer for nextwave
        alarm[1] = global.time_between_waves;
    }
    spawnrate *= 0.9;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0,0, "Wave " + string(wavenumber) + " of " + string(global.totalwaves) + ". Enemies left in wave: " + string(inwave + instance_number(zombie)) + " of " + string(global.increment*(wavenumber-1) + global.startingzombies));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
