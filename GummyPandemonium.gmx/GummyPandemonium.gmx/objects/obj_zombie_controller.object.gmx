<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup
global.time_between_waves = room_speed*15;
global.time_between_spawns = room_speed*3;
global.remaining[0] = 20;
global.remaining[1] = 5;
////////////////////////////////////////////
programmedzombies = 2;
////////
timew = global.time_between_waves;
times = global.time_between_spawns;

// Get number of types of zombies by looping and checking how many
ntypes = 0;
for (i = 0; i &lt; programmedzombies; i++) {
    remaining[i] = global.remaining[i];
    if (remaining[i] &gt; 0) {
        ntypes++;
    }
}

// CONSTANT
spawnpoint[0,0] = 740;
spawnpoint[0,1] = 81;
spawnpoint[1,0] = 1473;
spawnpoint[1,1] = 1150;


// Number of yellows before each blue
smallest = global.remaining[1];
nwave[0] = global.remaining[0]/smallest; // Num yellow per wave
nwave[1] = global.remaining[1]/smallest; // Num blue per wave

wavenumber = 0;
//calculate total waves
totalzombies = 0;
for (i = 0; i &lt; ntypes; i++) {
    totalzombies += remaining[i];
}

zombiesperwave = 0;
for (i = 0; i &lt; ntypes; i++) {
    zombiesperwave += nwave[i];
}
totalwaves = ceil(totalzombies/zombiesperwave);

positions = 1; // Number of positions 1 - 4

alarm[1] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New wave
wavenumber++;

remaining[0] -= nwave[0];
remaining[1] -= nwave[1];

inwave[0] = nwave[0];
inwave[1] = nwave[1];

// Make game harder
times*=0.8;
timew*=0.8;

if (wavenumber == round(totalwaves/2)) {
    //halfway
    positions++;
}

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///New spawn
n = 0;
for (i = 0; i &lt; ntypes; i++) {
    if (inwave[i] &lt; 1) {
        n++;
    }
}
if (n == ntypes) {
    // Wave is over so start timer for nextwave
    alarm[1] = timew;
    exit
}

type = irandom(ntypes-1)
while (!(inwave[type] &gt; 0)) {
    type = irandom(ntypes-1);
}

position = irandom(positions-1);

if (type == 0) {
    t = zombie;
} else if (type == 1) {
    t = enemy_dog;
}
inwave[type]--;
instance_create(spawnpoint[position,0], spawnpoint[position,1], t)
alarm[0] = times;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(zombie) {
    // Check to see if the game is over
    n = 0;
    for (i = 0; i &lt; ntypes; i++) {
        if (remaining[i] == 0) {
            n++;
        }
    }
    // If there are no remaining zombies left to spawn.
    if (n == ntypes) {
        room_restart();
    } else {
        // Start next wave early if the timer is going between waves
        if (obj_zombie_controller.alarm[1]) {
            obj_zombie_controller.alarm[1] = 1;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
